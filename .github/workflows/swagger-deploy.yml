name: Deploy Swagger Docs to GitHub Pages

on:
  push:
    branches:
      - main
      - dev
      - feat/swagger-action # 테스트용 브랜치
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # 빌드 및 정적 파일 생성 작업
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          # 저장소 루트에 있는 package-lock.json을 캐시 키로 사용
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        # 저장소 루트에서 npm install 실행
        run: npm install

      - name: Generate Swagger JSON
        # 저장소 루트에서 스크립트 실행
        run: npm run export:swagger
        env:
          # NestJS 앱 초기화에 필요한 최소한의 환경 변수 설정
          DATABASE_URL: "postgresql://user:password@localhost:5432/db?schema=public"
          JWT_SECRET: "temp-secret-for-ci"
          JWT_EXPIRATION_TIME: "3600"

      - name: Prepare Swagger UI
        # 저장소 루트에서 스크립트 실행
        run: npm run swagger:ui:prepare

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # 저장소 루트에 생성된 swagger-ui 폴더를 업로드
          path: ./swagger-ui

  # GitHub Pages 배포 작업 (main, dev, feat/swagger-action  브랜치에서만 실행)
  deploy:
    # feat/swagger-action 브랜치에서는 배포를 건너뛰고, main/dev 브랜치에서만 배포
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/feat/swagger-action'
    needs: build # build 작업이 끝난 후 실행
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
